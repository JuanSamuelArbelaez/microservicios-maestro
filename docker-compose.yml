services:
  database:
    image: postgres:15
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin_user
      POSTGRES_PASSWORD: supersecurepassword
      POSTGRES_DB: usuariosdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin_user -d usuariosdb"]
      interval: 10s
      timeout: 5s
      retries: 6

  data-service:
    build: ./servicio-datos
    container_name: data-service
    restart: unless-stopped
    environment:
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: admin_user
      DB_PASSWORD: supersecurepassword
      DB_NAME: usuariosdb
      OTP_SERVICE_URL: http://otp-service:8084/api/otp
    depends_on:
      - database
    ports:
      - "8082:8082"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl -f http://localhost:8082/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6

  user-service:
    build: ./servicio-usuarios
    container_name: user-service
    restart: unless-stopped
    environment:
      - PUBLIC_KEY_PATH=/app/keys/public-key.pem
      - PRIVATE_KEY_PATH=/app/keys/private-key.pem
      - DATA_SERVICE_URL=http://data-service:8082/api/users
      - AUTH_SERVICE_URL=http://data-service:8082/api/auth
    volumes:
      - ./keys:/app/keys:ro
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - data-service
    healthcheck:
      test: ["CMD", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nc -z localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 6

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 50
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics --list --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 20
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network

  notification-service:
    build: ./servicio-notificaciones
    container_name: notification-service
    restart: unless-stopped
    env_file:
      - ./servicio-notificaciones/.env
    ports:
      - "8083:8083"
    networks:
      - app-network
    depends_on:
      - kafka

  notification-orchestrator:
    build: ./orquestador-notificaciones
    container_name: notification-orchestrator
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_PRODUCER_TOPIC: notifications
      KAFKA_CONSUMER_TOPIC: user-events
      KAFKA_GROUP_ID: kafka-listener-group
    ports:
      - "8085:8080"
    networks:
      - app-network

  servicio-otp:
    build: ./servicio-otp
    container_name: otp-service
    restart: unless-stopped
    ports:
      - "8084:8084"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl -f http://localhost:8084/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - app-network

  # --- Jenkins service agregado ---
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: unless-stopped
    ports:
      - "8086:8080"     # host:container
      - "50000:50000"   # puerto de agentes de Jenkins
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-network

  # --- SonarQube service agregado ---www.colpensiones.gov.co
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    restart: unless-stopped
    ports:
      - "9000:9000"     # interfaz web de SonarQube Admin_123456
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - app-network

  # --- Loki para almacenamiento de logs ---
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config:/etc/loki
      - loki_data:/loki
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Promtail para recolectar logs ---
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./promtail-config:/etc/promtail
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - app-network

  # --- Grafana para visualizaci√≥n ---
  grafana:
    image: grafana/grafana:nightly
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
    depends_on:
      - loki
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  kafka_data:
  jenkins_home:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  loki_data:
  grafana_data:
